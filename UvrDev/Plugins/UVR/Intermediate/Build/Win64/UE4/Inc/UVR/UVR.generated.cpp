// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/UvrPrivatePCH.h"
#include "UVR.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1UVR() {}
	void UUvrGameEngine::StaticRegisterNativesUUvrGameEngine()
	{
	}
	IMPLEMENT_CLASS(UUvrGameEngine, 3285982286);
	void AUvrGameMode::StaticRegisterNativesAUvrGameMode()
	{
	}
	IMPLEMENT_CLASS(AUvrGameMode, 933540074);
	void AUvrHUD::StaticRegisterNativesAUvrHUD()
	{
	}
	IMPLEMENT_CLASS(AUvrHUD, 2642951671);
	void AUvrPlayerController::StaticRegisterNativesAUvrPlayerController()
	{
	}
	IMPLEMENT_CLASS(AUvrPlayerController, 1401808367);
class UScriptStruct* FTrackerDevice::StaticStruct()
{
	extern UVR_API class UPackage* Z_Construct_UPackage__Script_UVR();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FTrackerDevice();
		extern UVR_API uint32 Get_Z_Construct_UScriptStruct_FTrackerDevice_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTrackerDevice, Z_Construct_UPackage__Script_UVR(), TEXT("TrackerDevice"), sizeof(FTrackerDevice), Get_Z_Construct_UScriptStruct_FTrackerDevice_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTrackerDevice(FTrackerDevice::StaticStruct, TEXT("/Script/UVR"), TEXT("TrackerDevice"), false, nullptr, nullptr);
static struct FScriptStruct_UVR_StaticRegisterNativesFTrackerDevice
{
	FScriptStruct_UVR_StaticRegisterNativesFTrackerDevice()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TrackerDevice")),new UScriptStruct::TCppStructOps<FTrackerDevice>);
	}
} ScriptStruct_UVR_StaticRegisterNativesFTrackerDevice;
class UScriptStruct* FTrackerChannel::StaticStruct()
{
	extern UVR_API class UPackage* Z_Construct_UPackage__Script_UVR();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FTrackerChannel();
		extern UVR_API uint32 Get_Z_Construct_UScriptStruct_FTrackerChannel_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTrackerChannel, Z_Construct_UPackage__Script_UVR(), TEXT("TrackerChannel"), sizeof(FTrackerChannel), Get_Z_Construct_UScriptStruct_FTrackerChannel_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTrackerChannel(FTrackerChannel::StaticStruct, TEXT("/Script/UVR"), TEXT("TrackerChannel"), false, nullptr, nullptr);
static struct FScriptStruct_UVR_StaticRegisterNativesFTrackerChannel
{
	FScriptStruct_UVR_StaticRegisterNativesFTrackerChannel()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TrackerChannel")),new UScriptStruct::TCppStructOps<FTrackerChannel>);
	}
} ScriptStruct_UVR_StaticRegisterNativesFTrackerChannel;
class UScriptStruct* FButtonDevice::StaticStruct()
{
	extern UVR_API class UPackage* Z_Construct_UPackage__Script_UVR();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonDevice();
		extern UVR_API uint32 Get_Z_Construct_UScriptStruct_FButtonDevice_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FButtonDevice, Z_Construct_UPackage__Script_UVR(), TEXT("ButtonDevice"), sizeof(FButtonDevice), Get_Z_Construct_UScriptStruct_FButtonDevice_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FButtonDevice(FButtonDevice::StaticStruct, TEXT("/Script/UVR"), TEXT("ButtonDevice"), false, nullptr, nullptr);
static struct FScriptStruct_UVR_StaticRegisterNativesFButtonDevice
{
	FScriptStruct_UVR_StaticRegisterNativesFButtonDevice()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ButtonDevice")),new UScriptStruct::TCppStructOps<FButtonDevice>);
	}
} ScriptStruct_UVR_StaticRegisterNativesFButtonDevice;
class UScriptStruct* FButtonChannel::StaticStruct()
{
	extern UVR_API class UPackage* Z_Construct_UPackage__Script_UVR();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonChannel();
		extern UVR_API uint32 Get_Z_Construct_UScriptStruct_FButtonChannel_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FButtonChannel, Z_Construct_UPackage__Script_UVR(), TEXT("ButtonChannel"), sizeof(FButtonChannel), Get_Z_Construct_UScriptStruct_FButtonChannel_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FButtonChannel(FButtonChannel::StaticStruct, TEXT("/Script/UVR"), TEXT("ButtonChannel"), false, nullptr, nullptr);
static struct FScriptStruct_UVR_StaticRegisterNativesFButtonChannel
{
	FScriptStruct_UVR_StaticRegisterNativesFButtonChannel()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ButtonChannel")),new UScriptStruct::TCppStructOps<FButtonChannel>);
	}
} ScriptStruct_UVR_StaticRegisterNativesFButtonChannel;
class UScriptStruct* FAxisDevice::StaticStruct()
{
	extern UVR_API class UPackage* Z_Construct_UPackage__Script_UVR();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FAxisDevice();
		extern UVR_API uint32 Get_Z_Construct_UScriptStruct_FAxisDevice_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAxisDevice, Z_Construct_UPackage__Script_UVR(), TEXT("AxisDevice"), sizeof(FAxisDevice), Get_Z_Construct_UScriptStruct_FAxisDevice_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAxisDevice(FAxisDevice::StaticStruct, TEXT("/Script/UVR"), TEXT("AxisDevice"), false, nullptr, nullptr);
static struct FScriptStruct_UVR_StaticRegisterNativesFAxisDevice
{
	FScriptStruct_UVR_StaticRegisterNativesFAxisDevice()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AxisDevice")),new UScriptStruct::TCppStructOps<FAxisDevice>);
	}
} ScriptStruct_UVR_StaticRegisterNativesFAxisDevice;
class UScriptStruct* FAxisChannel::StaticStruct()
{
	extern UVR_API class UPackage* Z_Construct_UPackage__Script_UVR();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FAxisChannel();
		extern UVR_API uint32 Get_Z_Construct_UScriptStruct_FAxisChannel_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAxisChannel, Z_Construct_UPackage__Script_UVR(), TEXT("AxisChannel"), sizeof(FAxisChannel), Get_Z_Construct_UScriptStruct_FAxisChannel_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAxisChannel(FAxisChannel::StaticStruct, TEXT("/Script/UVR"), TEXT("AxisChannel"), false, nullptr, nullptr);
static struct FScriptStruct_UVR_StaticRegisterNativesFAxisChannel
{
	FScriptStruct_UVR_StaticRegisterNativesFAxisChannel()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AxisChannel")),new UScriptStruct::TCppStructOps<FAxisChannel>);
	}
} ScriptStruct_UVR_StaticRegisterNativesFAxisChannel;
	void AUvrRoot::StaticRegisterNativesAUvrRoot()
	{
		FNativeFunctionRegistrar::RegisterFunction(AUvrRoot::StaticClass(), "LookUpAtRate",(Native)&AUvrRoot::execLookUpAtRate);
		FNativeFunctionRegistrar::RegisterFunction(AUvrRoot::StaticClass(), "MoveForward",(Native)&AUvrRoot::execMoveForward);
		FNativeFunctionRegistrar::RegisterFunction(AUvrRoot::StaticClass(), "MoveRight",(Native)&AUvrRoot::execMoveRight);
		FNativeFunctionRegistrar::RegisterFunction(AUvrRoot::StaticClass(), "MoveUp",(Native)&AUvrRoot::execMoveUp);
		FNativeFunctionRegistrar::RegisterFunction(AUvrRoot::StaticClass(), "TurnAtRate",(Native)&AUvrRoot::execTurnAtRate);
	}
	IMPLEMENT_CLASS(AUvrRoot, 2441633890);
	void UUvrSceneComponent::StaticRegisterNativesUUvrSceneComponent()
	{
	}
	IMPLEMENT_CLASS(UUvrSceneComponent, 3764140128);
	void UUvrCameraComponent::StaticRegisterNativesUUvrCameraComponent()
	{
	}
	IMPLEMENT_CLASS(UUvrCameraComponent, 122712639);
	void UUvrScreenComponent::StaticRegisterNativesUUvrScreenComponent()
	{
	}
	IMPLEMENT_CLASS(UUvrScreenComponent, 803183824);
	void UUvrSceneComponentSync::StaticRegisterNativesUUvrSceneComponentSync()
	{
	}
	IMPLEMENT_CLASS(UUvrSceneComponentSync, 4054790332);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_APawn();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPawnMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();

	UVR_API class UClass* Z_Construct_UClass_UUvrGameEngine_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_UUvrGameEngine();
	UVR_API class UClass* Z_Construct_UClass_AUvrGameMode_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_AUvrGameMode();
	UVR_API class UClass* Z_Construct_UClass_AUvrHUD_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_AUvrHUD();
	UVR_API class UClass* Z_Construct_UClass_AUvrPlayerController_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_AUvrPlayerController();
	UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FTrackerDevice();
	UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FTrackerChannel();
	UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonDevice();
	UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonChannel();
	UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FAxisDevice();
	UVR_API class UScriptStruct* Z_Construct_UScriptStruct_FAxisChannel();
	UVR_API class UFunction* Z_Construct_UFunction_AUvrRoot_LookUpAtRate();
	UVR_API class UFunction* Z_Construct_UFunction_AUvrRoot_MoveForward();
	UVR_API class UFunction* Z_Construct_UFunction_AUvrRoot_MoveRight();
	UVR_API class UFunction* Z_Construct_UFunction_AUvrRoot_MoveUp();
	UVR_API class UFunction* Z_Construct_UFunction_AUvrRoot_TurnAtRate();
	UVR_API class UClass* Z_Construct_UClass_AUvrRoot_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_AUvrRoot();
	UVR_API class UClass* Z_Construct_UClass_UUvrSceneComponent_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_UUvrSceneComponent();
	UVR_API class UClass* Z_Construct_UClass_UUvrCameraComponent_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_UUvrCameraComponent();
	UVR_API class UClass* Z_Construct_UClass_UUvrScreenComponent_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_UUvrScreenComponent();
	UVR_API class UClass* Z_Construct_UClass_UUvrSceneComponentSync_NoRegister();
	UVR_API class UClass* Z_Construct_UClass_UUvrSceneComponentSync();
	UVR_API class UPackage* Z_Construct_UPackage__Script_UVR();
	UClass* Z_Construct_UClass_UUvrGameEngine_NoRegister()
	{
		return UUvrGameEngine::StaticClass();
	}
	UClass* Z_Construct_UClass_UUvrGameEngine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameEngine();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = UUvrGameEngine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008E;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/Basics/UvrGameEngine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/Game/Basics/UvrGameEngine.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUvrGameEngine(Z_Construct_UClass_UUvrGameEngine, &UUvrGameEngine::StaticClass, TEXT("UUvrGameEngine"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUvrGameEngine);
	UClass* Z_Construct_UClass_AUvrGameMode_NoRegister()
	{
		return AUvrGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_AUvrGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = AUvrGameMode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2090028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/Basics/UvrGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/Game/Basics/UvrGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AUvrGameMode(Z_Construct_UClass_AUvrGameMode, &AUvrGameMode::StaticClass, TEXT("AUvrGameMode"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AUvrGameMode);
	UClass* Z_Construct_UClass_AUvrHUD_NoRegister()
	{
		return AUvrHUD::StaticClass();
	}
	UClass* Z_Construct_UClass_AUvrHUD()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AHUD();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = AUvrHUD::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2090028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Rendering Actor Input Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/Basics/UvrHUD.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/Game/Basics/UvrHUD.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AUvrHUD(Z_Construct_UClass_AUvrHUD, &AUvrHUD::StaticClass, TEXT("AUvrHUD"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AUvrHUD);
	UClass* Z_Construct_UClass_AUvrPlayerController_NoRegister()
	{
		return AUvrPlayerController::StaticClass();
	}
	UClass* Z_Construct_UClass_AUvrPlayerController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerController();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = AUvrPlayerController::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900284;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/Basics/UvrPlayerController.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/Game/Basics/UvrPlayerController.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AUvrPlayerController(Z_Construct_UClass_AUvrPlayerController, &AUvrPlayerController::StaticClass, TEXT("AUvrPlayerController"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AUvrPlayerController);
	UScriptStruct* Z_Construct_UScriptStruct_FTrackerDevice()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UVR();
		extern uint32 Get_Z_Construct_UScriptStruct_FTrackerDevice_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TrackerDevice"), sizeof(FTrackerDevice), Get_Z_Construct_UScriptStruct_FTrackerDevice_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TrackerDevice"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTrackerDevice>, EStructFlags(0x00000001));
			UProperty* NewProp_Channels = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Channels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Channels, FTrackerDevice), 0x0010000000020001);
			UProperty* NewProp_Channels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Channels, TEXT("Channels"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FTrackerChannel());
			UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Id"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Id, FTrackerDevice), 0x0010000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Channels, TEXT("Category"), TEXT("TrackerDevice"));
			MetaData->SetValue(NewProp_Channels, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("TrackerDevice"));
			MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTrackerDevice_CRC() { return 2006484026U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTrackerChannel()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UVR();
		extern uint32 Get_Z_Construct_UScriptStruct_FTrackerChannel_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("TrackerChannel"), sizeof(FTrackerChannel), Get_Z_Construct_UScriptStruct_FTrackerChannel_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TrackerChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTrackerChannel>, EStructFlags(0x00000001));
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, FTrackerChannel), 0x0010000000020001, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, FTrackerChannel), 0x0010000000020001, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Channel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Channel"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Channel, FTrackerChannel), 0x0010000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("TrackerChannel"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Location, TEXT("Category"), TEXT("TrackerChannel"));
			MetaData->SetValue(NewProp_Location, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Channel, TEXT("Category"), TEXT("TrackerChannel"));
			MetaData->SetValue(NewProp_Channel, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTrackerChannel_CRC() { return 3532448286U; }
	UScriptStruct* Z_Construct_UScriptStruct_FButtonDevice()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UVR();
		extern uint32 Get_Z_Construct_UScriptStruct_FButtonDevice_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ButtonDevice"), sizeof(FButtonDevice), Get_Z_Construct_UScriptStruct_FButtonDevice_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ButtonDevice"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FButtonDevice>, EStructFlags(0x00000001));
			UProperty* NewProp_Channels = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Channels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Channels, FButtonDevice), 0x0010000000020001);
			UProperty* NewProp_Channels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Channels, TEXT("Channels"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FButtonChannel());
			UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Id"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Id, FButtonDevice), 0x0010000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Channels, TEXT("Category"), TEXT("ButtonDevice"));
			MetaData->SetValue(NewProp_Channels, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("ButtonDevice"));
			MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FButtonDevice_CRC() { return 2293535388U; }
	UScriptStruct* Z_Construct_UScriptStruct_FButtonChannel()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UVR();
		extern uint32 Get_Z_Construct_UScriptStruct_FButtonChannel_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("ButtonChannel"), sizeof(FButtonChannel), Get_Z_Construct_UScriptStruct_FButtonChannel_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ButtonChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FButtonChannel>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(State, FButtonChannel, bool);
			UProperty* NewProp_State = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("State"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(State, FButtonChannel), 0x0010000000020001, CPP_BOOL_PROPERTY_BITMASK(State, FButtonChannel), sizeof(bool), true);
			UProperty* NewProp_Channel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Channel"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Channel, FButtonChannel), 0x0010000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_State, TEXT("Category"), TEXT("ButtonChannel"));
			MetaData->SetValue(NewProp_State, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Channel, TEXT("Category"), TEXT("ButtonChannel"));
			MetaData->SetValue(NewProp_Channel, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FButtonChannel_CRC() { return 1137000889U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAxisDevice()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UVR();
		extern uint32 Get_Z_Construct_UScriptStruct_FAxisDevice_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AxisDevice"), sizeof(FAxisDevice), Get_Z_Construct_UScriptStruct_FAxisDevice_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AxisDevice"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAxisDevice>, EStructFlags(0x00000001));
			UProperty* NewProp_Channels = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Channels"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Channels, FAxisDevice), 0x0010000000020001);
			UProperty* NewProp_Channels_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Channels, TEXT("Channels"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FAxisChannel());
			UProperty* NewProp_Id = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Id"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Id, FAxisDevice), 0x0010000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Channels, TEXT("Category"), TEXT("AxisDevice"));
			MetaData->SetValue(NewProp_Channels, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Id, TEXT("Category"), TEXT("AxisDevice"));
			MetaData->SetValue(NewProp_Id, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAxisDevice_CRC() { return 4173643213U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAxisChannel()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_UVR();
		extern uint32 Get_Z_Construct_UScriptStruct_FAxisChannel_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("AxisChannel"), sizeof(FAxisChannel), Get_Z_Construct_UScriptStruct_FAxisChannel_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AxisChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAxisChannel>, EStructFlags(0x00000001));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, FAxisChannel), 0x0010000000020001);
			UProperty* NewProp_Channel = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Channel"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Channel, FAxisChannel), 0x0010000000020001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("AxisChannel"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
			MetaData->SetValue(NewProp_Channel, TEXT("Category"), TEXT("AxisChannel"));
			MetaData->SetValue(NewProp_Channel, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrInputDataStructs.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAxisChannel_CRC() { return 2612124315U; }
	UFunction* Z_Construct_UFunction_AUvrRoot_LookUpAtRate()
	{
		struct UvrRoot_eventLookUpAtRate_Parms
		{
			float Rate;
		};
		UObject* Outer=Z_Construct_UClass_AUvrRoot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LookUpAtRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04040401, 65535, sizeof(UvrRoot_eventLookUpAtRate_Parms));
			UProperty* NewProp_Rate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Rate, UvrRoot_eventLookUpAtRate_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called via input to look up at a given rate (or down if Rate is negative).\n@param Rate   This is a normalized rate, i.e. 1.0 means 100% of desired turn rate"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AUvrRoot_MoveForward()
	{
		struct UvrRoot_eventMoveForward_Parms
		{
			float Val;
		};
		UObject* Outer=Z_Construct_UClass_AUvrRoot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MoveForward"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04040401, 65535, sizeof(UvrRoot_eventMoveForward_Parms));
			UProperty* NewProp_Val = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Val"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Val, UvrRoot_eventMoveForward_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Input callback to move forward in local space (or backward if Val is negative).\n@param Val Amount of movement in the forward direction (or backward if negative).\n@see APawn::AddMovementInput()"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AUvrRoot_MoveRight()
	{
		struct UvrRoot_eventMoveRight_Parms
		{
			float Val;
		};
		UObject* Outer=Z_Construct_UClass_AUvrRoot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MoveRight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04040401, 65535, sizeof(UvrRoot_eventMoveRight_Parms));
			UProperty* NewProp_Val = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Val"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Val, UvrRoot_eventMoveRight_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Input callback to strafe right in local space (or left if Val is negative).\n@param Val Amount of movement in the right direction (or left if negative).\n@see APawn::AddMovementInput()"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AUvrRoot_MoveUp()
	{
		struct UvrRoot_eventMoveUp_Parms
		{
			float Val;
		};
		UObject* Outer=Z_Construct_UClass_AUvrRoot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MoveUp"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04040401, 65535, sizeof(UvrRoot_eventMoveUp_Parms));
			UProperty* NewProp_Val = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Val"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Val, UvrRoot_eventMoveUp_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Input callback to move up in world space (or down if Val is negative).\n@param Val Amount of movement in the world up direction (or down if negative).\n@see APawn::AddMovementInput()"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AUvrRoot_TurnAtRate()
	{
		struct UvrRoot_eventTurnAtRate_Parms
		{
			float Rate;
		};
		UObject* Outer=Z_Construct_UClass_AUvrRoot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TurnAtRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04040401, 65535, sizeof(UvrRoot_eventTurnAtRate_Parms));
			UProperty* NewProp_Rate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Rate, UvrRoot_eventTurnAtRate_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called via input to turn at a given rate.\n@param Rate   This is a normalized rate, i.e. 1.0 means 100% of desired turn rate"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AUvrRoot_NoRegister()
	{
		return AUvrRoot::StaticClass();
	}
	UClass* Z_Construct_UClass_AUvrRoot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APawn();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = AUvrRoot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_AUvrRoot_LookUpAtRate());
				OuterClass->LinkChild(Z_Construct_UFunction_AUvrRoot_MoveForward());
				OuterClass->LinkChild(Z_Construct_UFunction_AUvrRoot_MoveRight());
				OuterClass->LinkChild(Z_Construct_UFunction_AUvrRoot_MoveUp());
				OuterClass->LinkChild(Z_Construct_UFunction_AUvrRoot_TurnAtRate());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CameraComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CameraComponent, AUvrRoot), 0x00200800000a0009, Z_Construct_UClass_UCameraComponent_NoRegister());
				UProperty* NewProp_CollisionComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CollisionComponent, AUvrRoot), 0x00200800000a001d, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_MovementComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MovementComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MovementComponent, AUvrRoot), 0x00200800000a001d, Z_Construct_UClass_UPawnMovementComponent_NoRegister());
				UProperty* NewProp_RotationAround = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationAround"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RotationAround, AUvrRoot), 0x0010000000080009, Z_Construct_UClass_USceneComponent_NoRegister());
				UProperty* NewProp_TranslationDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslationDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TranslationDirection, AUvrRoot), 0x0010000000080009, Z_Construct_UClass_USceneComponent_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDefaultControlEnabled, AUvrRoot, uint8);
				UProperty* NewProp_bDefaultControlEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDefaultControlEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDefaultControlEnabled, AUvrRoot), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bDefaultControlEnabled, AUvrRoot), sizeof(uint8), false);
				UProperty* NewProp_BaseLookUpRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseLookUpRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BaseLookUpRate, AUvrRoot), 0x0010000000000005);
				UProperty* NewProp_BaseTurnRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseTurnRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BaseTurnRate, AUvrRoot), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AUvrRoot_LookUpAtRate(), "LookUpAtRate"); // 1187271042
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AUvrRoot_MoveForward(), "MoveForward"); // 469178598
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AUvrRoot_MoveRight(), "MoveRight"); // 938882898
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AUvrRoot_MoveUp(), "MoveUp"); // 3932396312
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AUvrRoot_TurnAtRate(), "TurnAtRate"); // 3637973145
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/UvrRoot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_CameraComponent, TEXT("Category"), TEXT("UVR"));
				MetaData->SetValue(NewProp_CameraComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CameraComponent, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_CameraComponent, TEXT("ToolTip"), TEXT("Camera component"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_CollisionComponent, TEXT("ToolTip"), TEXT("Collision component"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("ToolTip"), TEXT("Movement component"));
				MetaData->SetValue(NewProp_RotationAround, TEXT("Category"), TEXT("UVR"));
				MetaData->SetValue(NewProp_RotationAround, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RotationAround, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_RotationAround, TEXT("ToolTip"), TEXT("Scene component. Specifies rotation center (UVR hierarchy rotation)."));
				MetaData->SetValue(NewProp_TranslationDirection, TEXT("Category"), TEXT("UVR"));
				MetaData->SetValue(NewProp_TranslationDirection, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_TranslationDirection, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_TranslationDirection, TEXT("ToolTip"), TEXT("Scene component. Specifies translation (UVR hierarchy navigation) direction."));
				MetaData->SetValue(NewProp_bDefaultControlEnabled, TEXT("Category"), TEXT("UVR"));
				MetaData->SetValue(NewProp_bDefaultControlEnabled, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_bDefaultControlEnabled, TEXT("ToolTip"), TEXT("Scene component. Specifies translation (UVR hierarchy navigation) direction."));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("ToolTip"), TEXT("Base lookup rate, in deg/sec. Other scaling may affect final lookup rate."));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrRoot.h"));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("ToolTip"), TEXT("Base turn rate, in deg/sec. Other scaling may affect final turn rate."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AUvrRoot(Z_Construct_UClass_AUvrRoot, &AUvrRoot::StaticClass, TEXT("AUvrRoot"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AUvrRoot);
	UClass* Z_Construct_UClass_UUvrSceneComponent_NoRegister()
	{
		return UUvrSceneComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UUvrSceneComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USceneComponent();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = UUvrSceneComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/UvrSceneComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrSceneComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUvrSceneComponent(Z_Construct_UClass_UUvrSceneComponent, &UUvrSceneComponent::StaticClass, TEXT("UUvrSceneComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUvrSceneComponent);
	UClass* Z_Construct_UClass_UUvrCameraComponent_NoRegister()
	{
		return UUvrCameraComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UUvrCameraComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UUvrSceneComponent();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = UUvrCameraComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/UvrCameraComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrCameraComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUvrCameraComponent(Z_Construct_UClass_UUvrCameraComponent, &UUvrCameraComponent::StaticClass, TEXT("UUvrCameraComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUvrCameraComponent);
	UClass* Z_Construct_UClass_UUvrScreenComponent_NoRegister()
	{
		return UUvrScreenComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UUvrScreenComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UUvrSceneComponent();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = UUvrScreenComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/UvrScreenComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrScreenComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUvrScreenComponent(Z_Construct_UClass_UUvrScreenComponent, &UUvrScreenComponent::StaticClass, TEXT("UUvrScreenComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUvrScreenComponent);
	UClass* Z_Construct_UClass_UUvrSceneComponentSync_NoRegister()
	{
		return UUvrSceneComponentSync::StaticClass();
	}
	UClass* Z_Construct_UClass_UUvrSceneComponentSync()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USceneComponent();
			Z_Construct_UPackage__Script_UVR();
			OuterClass = UUvrSceneComponentSync::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/UvrSceneComponentSync.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Game/UvrSceneComponentSync.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUvrSceneComponentSync(Z_Construct_UClass_UUvrSceneComponentSync, &UUvrSceneComponentSync::StaticClass, TEXT("UUvrSceneComponentSync"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUvrSceneComponentSync);
	UPackage* Z_Construct_UPackage__Script_UVR()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/UVR")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x2409088E;
			Guid.B = 0xEA3A9DB5;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
